[{"C:\\Users\\Gebruiker\\Desktop\\Engineering\\RoutingAlgorithm\\src\\src\\webapp\\src\\index.js":"1","C:\\Users\\Gebruiker\\Desktop\\Engineering\\RoutingAlgorithm\\src\\src\\webapp\\src\\reportWebVitals.js":"2","C:\\Users\\Gebruiker\\Desktop\\Engineering\\RoutingAlgorithm\\src\\src\\webapp\\src\\App.js":"3","C:\\Users\\Gebruiker\\Desktop\\Engineering\\RoutingAlgorithm\\src\\src\\webapp\\src\\Nodes.js":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":189,"mtime":1607435416903,"results":"8","hashOfConfig":"6"},{"size":4493,"mtime":1608070984227,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1ar7g2p",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"C:\\Users\\Gebruiker\\Desktop\\Engineering\\RoutingAlgorithm\\src\\src\\webapp\\src\\index.js",[],["21","22"],"C:\\Users\\Gebruiker\\Desktop\\Engineering\\RoutingAlgorithm\\src\\src\\webapp\\src\\reportWebVitals.js",[],"C:\\Users\\Gebruiker\\Desktop\\Engineering\\RoutingAlgorithm\\src\\src\\webapp\\src\\App.js",["23"],"import logo from './logo.svg';\nimport './App.css';\nimport Nodes from \"./Nodes\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nodes/>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Gebruiker\\Desktop\\Engineering\\RoutingAlgorithm\\src\\src\\webapp\\src\\Nodes.js",["24","25"],"import React, {Component} from 'react';\r\n\r\nclass AdminMenu extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            nodeLocations: [\r\n                [200, 200],\r\n                [400, 200],\r\n                [600, 200],\r\n                [400, 400],\r\n                [400, 600],\r\n                [400, 800],\r\n                [200, 800],\r\n                [600, 800]\r\n            ],\r\n            startNode: 0,\r\n            endNode: 0,\r\n            nodeConnections: [\r\n                [1],\r\n                [0, 2, 3],\r\n                [1],\r\n                [1, 4],\r\n                [3, 5],\r\n                [4, 6, 7],\r\n                [5],\r\n                [5]\r\n            ]\r\n        }\r\n    }\r\n\r\n    clearNodeColors = () => {\r\n        for(let i = 0; i < this.state.nodeLocations.length; i++) {\r\n            document.getElementById(i).style.color = \"red\";\r\n        }\r\n    }\r\n\r\n    findPath = () => {\r\n        this.clearNodeColors();\r\n\r\n        let tempNodeConnections = [\r\n            [1],\r\n            [0, 2, 3],\r\n            [1],\r\n            [1, 4],\r\n            [3, 5],\r\n            [4, 6, 7],\r\n            [5],\r\n            [5]\r\n        ];\r\n        let found = false;\r\n        let foundRoute = [];\r\n\r\n        let currentNode = this.state.startNode;\r\n\r\n        while(!found) {\r\n            let nextNode;\r\n            if(tempNodeConnections[currentNode].length > 0) {nextNode = tempNodeConnections[currentNode][0]}\r\n\r\n            console.log(currentNode + \" > \" + nextNode);\r\n\r\n            console.log(\"Before: \" + tempNodeConnections[nextNode]);\r\n\r\n            if(tempNodeConnections[nextNode][0] === currentNode && tempNodeConnections[nextNode].length > 1) {\r\n                tempNodeConnections[nextNode] = tempNodeConnections[nextNode].slice(1);\r\n            }\r\n\r\n                if(nextNode === this.state.endNode) {\r\n                let route = this.state.startNode;\r\n                let addedRoute = route;\r\n                document.getElementById(addedRoute).style.color = \"darkgreen\";\r\n\r\n                while(parseInt(tempNodeConnections[addedRoute]) !== this.state.endNode) {\r\n                    addedRoute = tempNodeConnections[addedRoute][0];\r\n                    route += \", \" + addedRoute;\r\n                    document.getElementById(addedRoute).style.color = \"lime\";\r\n                }\r\n\r\n                addedRoute = tempNodeConnections[addedRoute][0];\r\n                document.getElementById(addedRoute).style.color = \"lightgreen\";\r\n                route += \", \" + addedRoute;\r\n                console.log(\"Route: \" + route);\r\n\r\n                break;\r\n            }\r\n\r\n            console.log(\"After: \" + tempNodeConnections[nextNode]);\r\n\r\n            currentNode = nextNode;\r\n            if(currentNode === this.state.endNode) break;\r\n        }\r\n    }\r\n\r\n    handleStartNode = (e) => {\r\n        console.log(e.target.value);\r\n\r\n        let nmbr;\r\n\r\n        if(e.target.value.length > 0) {\r\n            nmbr = parseInt(e.target.value);\r\n        }\r\n\r\n        this.setState({\r\n            startNode: nmbr\r\n        })\r\n    }\r\n\r\n    handleEndNode = (e) => {\r\n        console.log(e.target.value);\r\n\r\n        let nmbr;\r\n\r\n        if(e.target.value.length > 0) {\r\n            nmbr = parseInt(e.target.value);\r\n        }\r\n\r\n        this.setState({\r\n            endNode: nmbr\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={\"nodeContainer\"} className={\"AdminMenu\"}>\r\n            {\r\n                this.state.nodeLocations.map((item, key) => {\r\n                    return <div style={{position: \"absolute\", left: item[0], top: item[1], color: \"red\"}} id={key}><img style={{width: \"1vw\", filter: \"invert(40%)\"}} src={\"https://cdn.onlinewebfonts.com/svg/img_558580.png\"}/>{key}</div>\r\n                })\r\n            }\r\n            <input style={{backgroundColor: \"transparent\", border: \"1px solid #4f4f4f\", color: \"#878787\", fontSize: \"1.2vw\", textAlign: \"center\"}} onChange={this.handleStartNode} value={this.state.startNode}/>\r\n            <input style={{backgroundColor: \"transparent\", border: \"1px solid #4f4f4f\", color: \"#878787\", fontSize: \"1.2vw\", textAlign: \"center\"}} onChange={this.handleEndNode} value={this.state.endNode}/>\r\n            <button style={{backgroundColor: \"transparent\", border: \"1px solid #4f4f4f\", color: \"#878787\", fontSize: \"1.2vw\", textAlign: \"center\"}} onClick={this.findPath}>Find Route</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminMenu;\r\n",{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":1,"column":8,"nodeType":"32","messageId":"33","endLine":1,"endColumn":12},{"ruleId":"30","severity":1,"message":"34","line":54,"column":13,"nodeType":"32","messageId":"33","endLine":54,"endColumn":23},{"ruleId":"35","severity":1,"message":"36","line":129,"column":116,"nodeType":"37","endLine":129,"endColumn":226},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'foundRoute' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]